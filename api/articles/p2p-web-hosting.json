{"title":"P2P Web Hosting","uid":"648c7171a652f6980efd8cdea11fee95","slug":"p2p-web-hosting","date":"2025-04-27T21:46:35.528Z","updated":"2025-04-27T21:46:35.528Z","comments":true,"path":"api/articles/p2p-web-hosting.json","cover":null,"content":"<h1 id=\"basic-local-example\"><a href=\"#basic-local-example\" class=\"headerlink\" title=\"basic local example\"></a>basic local example</h1><h3 id=\"Client-A\"><a href=\"#Client-A\" class=\"headerlink\" title=\"Client A\"></a>Client A</h3><h4 id=\"Host-a-http-web-server-via-unix-sockets\"><a href=\"#Host-a-http-web-server-via-unix-sockets\" class=\"headerlink\" title=\"Host a http web server via unix sockets.\"></a>Host a http web server via unix sockets.</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>server.py</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import http.server\nimport json\nimport os\nimport socket\nimport sys\nimport traceback\n\ndef process_cmd(cmd, *args):\n    print(f&quot;In process_cmd(&#123;cmd&#125;, &#123;args&#125;)...&quot;)\n\nclass HTTPHandler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        size &#x3D; int(self.headers.get(&#39;Content-Length&#39;, 0))\n        body &#x3D; self.rfile.read(size)\n        args &#x3D; json.loads(body) if body else []\n        try:\n            result &#x3D; process_cmd(self.path[1:], *args)\n            self.send(200, result or &#39;Success&#39;)\n        except Exception:\n            self.send(500, str(traceback.format_exc()))\n\n    def do_GET(self):\n        self.do_POST()\n\n    def send(self, code, reply):\n        # avoid exception in server.py address_string()\n        self.client_address &#x3D; (&#39;&#39;,)\n        self.send_response(code)\n        self.end_headers()\n        self.wfile.write(reply.encode(&#39;utf-8&#39;))\n\nsock_file &#x3D; sys.argv[1]\ntry:\n    os.remove(sock_file)\nexcept OSError:\n    pass\nsock &#x3D; socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\nsock.bind(sock_file)\nsock.listen(0)\n\nserver &#x3D; http.server.HTTPServer(sock_file, HTTPHandler,\n                                False)\nserver.socket &#x3D; sock\nserver.serve_forever()\n\nsock.shutdown(socket.SHUT_RDWR)\nsock.close()\nos.remove(sock_file)</code></pre>\n<p>and run this with:</p>\n<p><code>python3 server.py /tmp/http.socket</code></p>\n<h2 id=\"Client-B\"><a href=\"#Client-B\" class=\"headerlink\" title=\"Client B\"></a>Client B</h2><h3 id=\"Turn-the-web-socket-path-into-a-tcp-connection-that-the-browser-can-understand\"><a href=\"#Turn-the-web-socket-path-into-a-tcp-connection-that-the-browser-can-understand\" class=\"headerlink\" title=\"Turn the web socket path into a tcp connection that the browser can understand\"></a>Turn the web socket path into a tcp connection that the browser can understand</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">socat TCP-LISTEN:80,forever,reuseaddr,fork UNIX-CONNECT:&#x2F;tmp&#x2F;http.socket</code></pre>\n\n<h3 id=\"Use-browser-to-see-web-page\"><a href=\"#Use-browser-to-see-web-page\" class=\"headerlink\" title=\"Use browser to see web page:\"></a>Use browser to see web page:</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>http://localhost</code></p></blockquote>\n<h1 id=\"same-example-using-P2P\"><a href=\"#same-example-using-P2P\" class=\"headerlink\" title=\"same example using P2P\"></a>same example using P2P</h1><h3 id=\"Client-A-1\"><a href=\"#Client-A-1\" class=\"headerlink\" title=\"Client A\"></a>Client A</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python3 server.py &#x2F;tmp&#x2F;http.socket\n# From another terminal, pipe the server socket into dumbpipe\nsocat UNIX-CONNECT:&#x2F;tmp&#x2F;http.socket,keepalive,ignoreeof EXEC:&quot;dumbpipe listen&quot;,reuseaddr\n# Note down nodeId from the console.</code></pre>\n\n<h3 id=\"Client-B-1\"><a href=\"#Client-B-1\" class=\"headerlink\" title=\"Client B\"></a>Client B</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">export nodeId&#x3D;&quot;&gt;&gt;The id from client A Console.&lt;&lt;&quot;\n# Connect to dumbpipe and expose the socket via tcp.\nexport CMD&#x3D;&quot;dumbpipe connect $nodeId&quot;\nsocat EXEC:&quot;$CMD&quot; TCP-LISTEN:80,forever,reuseaddr,fork\n# Test from another terminal\ncurl http:&#x2F;&#x2F;localhost</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><em>So far this only accepts 1 http e2e and you have to kill <code>socat</code> on client B for <code>curl</code> to respond. This is due to unix-listen just stuck with the first request and it wonâ€™t fork additional requests.</em></p></blockquote>\n","feature":true,"text":"basic local exampleClient AHost a http web server via unix sockets. server.py import http.server import json import os import socket import ...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#basic-local-example\"><span class=\"toc-text\">basic local example</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Client-A\"><span class=\"toc-text\">Client A</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Host-a-http-web-server-via-unix-sockets\"><span class=\"toc-text\">Host a http web server via unix sockets.</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Client-B\"><span class=\"toc-text\">Client B</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Turn-the-web-socket-path-into-a-tcp-connection-that-the-browser-can-understand\"><span class=\"toc-text\">Turn the web socket path into a tcp connection that the browser can understand</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Use-browser-to-see-web-page\"><span class=\"toc-text\">Use browser to see web page:</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#same-example-using-P2P\"><span class=\"toc-text\">same example using P2P</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Client-A-1\"><span class=\"toc-text\">Client A</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Client-B-1\"><span class=\"toc-text\">Client B</span></a></li></ol></li></ol></li></ol>","author":{"name":"Marin Bivol","slug":"marin-bivol","avatar":"https://avatars.githubusercontent.com/u/22717869?v=4","link":"/","description":"","socials":{"github":"https://github.com/adminy","twitter":"https://twitter.com/adminy8","stackoverflow":"https://stackoverflow.com/users/4316850/got-to-figure","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fa-brands fa-instagram","link":"https://instagram.com/god8luck"},"discord":{"icon":"fa-brands fa-discord","link":"https://discord.gg/spxDansF"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"Future Proof Smart Home","uid":"8bca6488f8f127550141329af1e7a4bb","slug":"smart-home","date":"2022-05-10T00:00:00.000Z","updated":"2025-04-27T21:46:35.528Z","comments":true,"path":"api/articles/smart-home.json","cover":"https://www.smarthomeperfected.com/wp-content/uploads/2021/06/matter-protocol2-scaled.jpg","text":"History for smart homes. It all started with the idea of fobs that are used to open gates for condos/apartments. Then companies like zigbee ...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"diy","slug":"diy","count":1,"path":"api/categories/diy.json"},{"name":"switch","slug":"diy/switch","count":1,"path":"api/categories/diy/switch.json"},{"name":"socket","slug":"diy/socket","count":1,"path":"api/categories/diy/socket.json"},{"name":"relay-switch","slug":"diy/relay-switch","count":1,"path":"api/categories/diy/relay-switch.json"},{"name":"NRF52840","slug":"NRF52840","count":1,"path":"api/categories/NRF52840.json"},{"name":"bluetooth","slug":"NRF52840/bluetooth","count":1,"path":"api/categories/NRF52840/bluetooth.json"},{"name":"802.15.4","slug":"NRF52840/802-15-4","count":1,"path":"api/categories/NRF52840/802-15-4.json"},{"name":"matter","slug":"NRF52840/matter","count":1,"path":"api/categories/NRF52840/matter.json"}],"tags":[{"name":"hardware","slug":"hardware","count":1,"path":"api/tags/hardware.json"},{"name":"protocols","slug":"protocols","count":1,"path":"api/tags/protocols.json"}],"author":{"name":"Marin Bivol","slug":"marin-bivol","avatar":"https://avatars.githubusercontent.com/u/22717869?v=4","link":"/","description":"","socials":{"github":"https://github.com/adminy","twitter":"https://twitter.com/adminy8","stackoverflow":"https://stackoverflow.com/users/4316850/got-to-figure","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"instagram":{"icon":"fa-brands fa-instagram","link":"https://instagram.com/god8luck"},"discord":{"icon":"fa-brands fa-discord","link":"https://discord.gg/spxDansF"}}}},"feature":true}}